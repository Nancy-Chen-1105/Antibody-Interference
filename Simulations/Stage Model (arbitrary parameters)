```{r}
require(deSolve)
library(tidyverse)
```


```{r}
#implementing model equations
testing<- function (t, y, parms) {
  with(as.list(c(parms)),{
    y=pmax(y,0)
    
    # vectors for each population
    V=y[1:(n+1)] 
    I=y[n+2]
    U=y[n+3]
    
    # make empty vectors of length n for the derivatives
    dV=rep(0,n+1)
    dI=0
    dU=0
    
    #making hill functions 
    beta=rep(0,n+1)
    d = rep(0,n+1)
    
    for(i in 1:(n+1)){
       beta[i] = c1*i^m/(phi1^m + i^m)
       d[i] = c2*(1-i^m/(phi2^m + i^m))
    }
    
    
    # calculate the derivatives
    dV[1] =  +p*I[1] - alpha*A*V[1] - beta[1]*U[1]*V[1] - d[1]*V[1]
    
    for(i in 2:(n)){
      dV[i] = +(n-(i-2))/n*alpha*A*V[i-1] - (n-(i-1))/n*alpha*A*V[i] 
              - beta[i]*U[1]*V[i] - d[i]*V[i]
    }
    
    dV[n+1] =  (1/n)*alpha*A*V[n] - beta[n+1]*U[1]*V[n+1] - d[n+1]*V[n+1]
    
    dI[1]= + U[1]*(sum(beta[1:n+1]*V[1:n+1])) - di*I[1]
    dU[1]= - U[1]*(sum(beta[1:n+1]*V[1:n+1]))
    
# output the derivatives
  dy=c(dV, dI, dU)
   return(list(dy))
  })
}

#defining parameters
p = 3
n = 50
alpha = 1 # antibody bounding speed  
A = 10 # antibody amount
di = 1.25 # infected cells dying rate

m = 2
c1 = 5*10^(-5)
phi1 = 5
c2 = 5
phi2 = 7

parms = c(p=p, n=n, alpha=alpha, A=A,di=di,
          m=m, c1=c1, phi1=phi1, c2=c2, phi2=phi2)

#time specification 
time <- seq(0, 100, 1)


#initial conditions
statenames <-c(paste('V',1:51, sep=''), 'I', 'U')
y <- rep(0, n+3)
names(y)<-statenames
y[grep('^V1$', statenames)]<-100
y[grep('I', statenames)]<-10
y[grep('U', statenames)]<-10^6


#solving the ode
soln <- as.data.frame(ode(y = y, time = time, testing, parms = parms))
```


```{r}
# plotting
legend.names = c()
a = c(11,10,9,8,7,6,5)
for (i in a){
  legend.names = append(legend.names, paste0("time = ", i))
}

plot(1:51, soln[11, 2:52], type = "b", col=1, lwd = 1.5)
lines(1:51, soln[10, 2:52], type = "b", col=2, lwd = 1.5)
lines(1:51, soln[9, 2:52], type = "b", col=3, lwd = 1.5)
lines(1:51, soln[8, 2:52], type = "b", col=4, lwd = 1.5)
lines(1:51, soln[7, 2:52], type = "b", col=5, lwd = 1.5)
lines(1:51, soln[6, 2:52], type = "b", col=6, lwd = 1.5)
lines(1:51, soln[5, 2:52], type = "b", col=7, lwd = 1.5)

legend("top", legend = legend.names,
       col = seq(1,7,1),lty = 1, cex = 0.8, bty="n")


```

```{r}
soln$Vtot <- rowSums(soln[,2:52])
soln
```

```{r}
plot(soln$Vtot~soln$time, col = "red", type = "l", ylim = c(0, 8^7),
     ylab = "Population",xlab = "time (days)", main = "Stages Model, n=50")
legend("topright", legend = c("Total Amount of Virus"),
       col = c("red"),lty = 1, cex = 0.8, bty = "n")
```

